// Generated by https://github.com/AdaskoTheBeAsT/TypeScriptGenerator

export abstract class EnumHelper {
  static getKeys<T>(type: T): string[] {
    const keys: string[] = [];
    const filteredKeys = Object.keys(type)
      .filter((k) => {
        return !/\d+/.test(k);
      });
    for (let key of filteredKeys) {
      const converted = key as keyof typeof type;
      const val = type[converted];
      if (typeof val === 'function') {
        continue;
      }
      keys.push(key);
    }
    return keys;
  }

  static getValues<T, K extends T[keyof T]>(type: T): K[] {
    const values: K[] = [];
    const filteredKeys = Object.keys(type)
      .filter((k) => {
        return !/\d+/.test(k);
      });
    for (let key of filteredKeys) {
      const converted = key as keyof T;
      const val = type[converted];
      if (typeof val === 'function') {
        continue;
      }
      values.push(val as any);
    }
    return values;
  }
}
