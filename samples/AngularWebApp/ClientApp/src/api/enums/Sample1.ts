// Generated by https://github.com/AdaskoTheBeAsT/TypeScriptGenerator

export enum Sample1 {
  First = 5,
  Second = 6,
}

export namespace Sample1 {

  export function getLabel(value: Sample1): string {
    switch(value) {
      case Sample1.First: return 'First';
      case Sample1.Second: return 'Second';
      default: throw new Error('Invalid value=`${value}`');
    }
  }

  export function getKeys(): string[] {
    const keys: string[] = [];
    for (let enumMember in Sample1) {
      if(!Sample1.hasOwnProperty(enumMember)) {
        continue;
      }
      if(isValidMember(enumMember)) {
        keys.push(Sample1[enumMember]);
      }
    }
    return keys;  
  }

  export function getValues(): Sample1[] {
    const values: Sample1[] = [];
    for (let enumMember in Sample1) {
      if(!Sample1.hasOwnProperty(enumMember)) {
        continue;
      }
      if(isValidMember(enumMember)) {
        values.push(enumMember);
      }        
    }
    return values;  
  }

  function isValidMember(value: any): value is number {
    return !isNaN(parseInt(value));
  }

}

