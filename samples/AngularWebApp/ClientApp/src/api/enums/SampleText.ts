// Generated by https://github.com/AdaskoTheBeAsT/TypeScriptGenerator

export enum SampleText {
  One = 'One',
  Two = 'Two',
}

export namespace SampleText {

  export function getLabel(value: SampleText): string {
    switch(value) {
      case SampleText.One: return 'Zero';
      case SampleText.Two: return 'Two';
      default: throw new Error('Invalid value=`${value}`');
    }
  }

  export function getKeys(): string[] {
    const keys: string[] = [];
    for(let enumMember in SampleText) {
      if(!SampleText.hasOwnProperty(enumMember)) {
        continue;
      }
      if(!isValidMember(enumMember)){
        continue;
      }
      const member = SampleText[enumMember];
      if(typeof member === 'function'){
        continue;
      }
      keys.push(enumMember);
    } 
    return keys;
  }

  export function getValues(): SampleText[] {
    const values: SampleText[] = [];
    for (let enumMember in SampleText) {
      if(!SampleText.hasOwnProperty(enumMember)) {
        continue;
      }
      if (!isValidMember(enumMember)) {
        continue;
      }
      const member = SampleText[enumMember];
      if(typeof member === 'function'){
        continue;
      }
      values.push(member);
    }   
    return values;
  }

  function isValidMember(value: string): value is keyof typeof SampleText {
    return value in SampleText;
  }

}

