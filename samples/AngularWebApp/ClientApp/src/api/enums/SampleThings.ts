// Generated by https://github.com/AdaskoTheBeAsT/TypeScriptGenerator

export enum SampleThings {
  None = 0,
  FirstValue = 1,
  SecondValue = 2,
  ThirdValue = 4,
}

export namespace SampleThings {

  export function getLabel(value: SampleThings): string {
    switch(value) {
      case SampleThings.None: return 'Zero';
      case SampleThings.FirstValue: return 'FirstValue';
      case SampleThings.SecondValue: return 'SecondValue';
      case SampleThings.ThirdValue: return 'ThirdValue';
      default: throw new Error('Invalid value=`${value}`');
    }
  }

  export function getKeys(): string[] {
    const keys: string[] = [];
    for (let enumMember in SampleThings) {
      if(!SampleThings.hasOwnProperty(enumMember)) {
        continue;
      }
      if(isValidMember(enumMember)) {
        keys.push(SampleThings[enumMember]);
      }
    }
    return keys;  
  }

  export function getValues(): SampleThings[] {
    const values: SampleThings[] = [];
    for (let enumMember in SampleThings) {
      if(!SampleThings.hasOwnProperty(enumMember)) {
        continue;
      }
      if(isValidMember(enumMember)) {
        values.push(enumMember);
      }        
    }
    return values;  
  }

  export function hasFlag(value: SampleThings, expected: SampleThings) {
    return (value && expected) === expected;
  }

  function isValidMember(value: any): value is number {
    return !isNaN(parseInt(value));
  }

}

